# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Ensure path arrays do not contain duplicates.
typeset -gU cdpath fpath mailpath path

path=(
  .
  $HOME/bin
  $HOME/{.local,code/go}/bin
  $HOME/.local/share/{chezmoi,chezmoi-private}/bin
  /opt/homebrew/{bin,sbin}
  /usr/sbin
  $path
)

fpath=(
  ~/.zsh_completions
  $fpath
)

### Added by Zinit's installer
if [[ ! -f $HOME/.zinit/bin/zinit.zsh ]]; then
    print -P "%F{33}▓▒░ %F{220}Installing %F{33}DHARMA%F{220} Initiative Plugin Manager (%F{33}zdharma/zinit%F{220})…%f"
    command mkdir -p "$HOME/.zinit" && command chmod g-rwX "$HOME/.zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.zinit/bin" && \
        print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
        print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi

source "$HOME/.zinit/bin/zinit.zsh"
autoload -Uz _zinit
autoload bashcompinit && bashcompinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
#zinit light-mode for \
#    zinit-zsh/z-a-patch-dl \
#    zinit-zsh/z-a-as-monitor

zi light-mode for zdharma-continuum/zinit-annex-bin-gem-node
zi light-mode for zdharma-continuum/zinit-annex-patch-dl

zi light-mode lucid depth=1 for romkatv/powerlevel10k

zi pack for ls_colors

# BEGIN binary installs
zi wait lucid for \
    from'gh-r' \
    nocompile \
    atclone'cp -vf completions/exa.zsh _exa
            cp man/*.1 ${ZINIT[MAN_DIR]}/man1/;
            cp man/*.5 ${ZINIT[MAN_DIR]}/man5/;' \
    atpull'%atclone' \
    sbin'**/exa -> exa' \
  ogham/exa

zi wait lucid for \
    from'gh-r' \
    nocompile \
    sbin'**/bat -> bat' \
  @sharkdp/bat

zi wait lucid for \
    from'gh-r'  \
    nocompile \
    sbin'**/fd -> fd' \
  @sharkdp/fd

zi wait lucid for \
    from'gh-r' \
    nocompile \
    sbin'fzf' \
    dl'https://raw.githubusercontent.com/junegunn/fzf/master/man/man1/fzf.1 -> ${ZINIT[MAN_DIR]}/man1/fzf.1' \
  junegunn/fzf \
  https://raw.githubusercontent.com/junegunn/fzf/master/shell/{key-bindings,completion}.zsh
# Below has conflicts on keybinds and doesn't work reliably.
# Keeping above bindings because they're handy.
#zi wait lucid for joshskidmore/zsh-fzf-history-search

zi wait lucid for \
    from'gh-r' \
    nocompile \
    atclone'cp -vf **/share/man/man1/*.1 ${ZINIT[MAN_DIR]}/man1/;' \
    atpull'%atclone' \
    sbin'**/nvim -> nvim' \
  neovim/neovim

zi wait lucid for \
    from'gh-r' \
    nocompile \
    as'completion' \
    atclone'procs --completion zsh' \
    atpull'%atclone' \
    sbin'**/procs -> procs' \
  dalance/procs

zi wait lucid for \
    from'gh-r' \
    nocompile \
    sbin'g*x -> grex' \
  pemistahl/grex

if [[ $(uname -a) =~ "/^Darwin.*/" ]]; then
  # Installing `hub` via brew to get an ARM binary, else tree-sitter install
  # may install the wrong arch (if the ts library is installed inside a `git commit`).
  # Still using completions from GitHub though.
  zi wait lucid for \
      as'completion' \
      nocompile \
      cp'etc/hub.zsh_completion -> _hub' \
    @github/hub
else
  # For Linux and Windows install from GitHub release
  zi wait lucid for \
      from'gh-r' \
      nocompile \
      as'completion' \
      atclone'cp hub**/etc/hub.zsh_completion _hub' \
      atpull'%atclone' \
      sbin'hub**/bin/hub -> hub' \
    @github/hub
fi

zi wait lucid for \
    from'gh-r' \
    nocompile \
    sbin'bin/ec-* -> ec' \
  editorconfig-checker/editorconfig-checker

zi wait lucid for \
    from'gh-r' \
    nocompile \
    atclone'cp -vf man/*.1 ${ZINIT[MAN_DIR]}/man1/' \
    atpull'%atclone' \
    sbin'actionlint' \
  rhysd/actionlint

## local github action runner
## disabled 'cause the docker image needed to run things is huge
#zi wait lucid for \
#    from'gh-r' \
#    nocompile \
#    sbin'act' \
#  nektos/act

# awesome git diff/blame/etc.
zi wait lucid for \
    nocompile \
    from'gh-r' \
    sbin'delta*/delta' \
  dandavison/delta

if [[ $(uname -a) =~ "/^Darwin.*/" ]]; then
  # not installing in WSL because it panics
  zi wait lucid for \
      nocompile \
      from'gh-r' \
      sbin'tree-sitter-* -> tree-sitter' \
    tree-sitter/tree-sitter
fi

zi wait lucid for \
    nocompile \
    from'gh-r' \
    sbin'glow' \
  charmbracelet/glow

zi wait lucid for \
    from'gh-r' \
    nocompile \
    atclone'cp -vf ripgrep*/complete/_rg _rg; cp -vf ripgrep*/doc/*.1 ${ZINIT[MAN_DIR]}/man1/' \
    atpull'%atclone' \
    sbin'ripgrep*/rg -> rg' \
  BurntSushi/ripgrep

zi wait lucid for \
    nocompile \
    from'gh-r' \
    atclone'mv rtx-v* rtx; ./rtx complete --shell=zsh > ~/.zsh_completions/_rtx' \
    atpull='%atclone' \
    sbin'rtx' \
  jdxcode/rtx

# END binary installs

# bunch'o exa aliases
zi wait lucid for TwoPizza9621536/zsh-exa

zi wait lucid for agkozak/zsh-z

zi wait lucid for \
    as'completion' \
    nocompile \
    id-as'docker-completion/_docker' \
    is-snippet \
  https://raw.githubusercontent.com/docker/cli/master/contrib/completion/zsh/_docker

zi wait lucid for \
    as'completion' \
    nocompile \
    id-as'lpass-completion/_lpass' \
    is-snippet \
  https://github.com/lastpass/lastpass-cli/raw/master/contrib/lpass_zsh_completion

zi wait lucid for \
    as"completion" \
    nocompile \
    id-as'asdf-completion/_asdf' \
    is-snippet \
  https://raw.githubusercontent.com/asdf-vm/asdf/master/completions/_asdf

zi wait lucid for \
  mollifier/cd-gitroot

zi wait lucid for \
  reegnz/jq-zsh-plugin

# krew: https://github.com/zdharma-continuum/zinit/blob/main/tests/gh-r.zunit#L417
# bitwarden: https://github.com/kalsowerus/zsh-bitwarden

#zi wait lucid for \
#    as'completion' \
#    nocompile \
#    id-as'keybase-completion/_keybase' \
#    is-snippet \
#  https://raw.githubusercontent.com/rbirnie/oh-my-zsh-keybase/master/keybase/_keybase

zi light-mode wait lucid depth=1 for \
  atload'bindkey -M vicmd "k" history-substring-search-up; bindkey -M vicmd "j" history-substring-search-down' \
    zsh-users/zsh-history-substring-search \
  blockf multisrc'*.plugin.zsh' pick'/dev/null' \
    ~/.zshrc.d \
  blockf multisrc'*.plugin.zsh' pick'/dev/null' \
    ~/.zshrc-private.d

# Bunch'o'completions
# Recommended to be loaded last.
zi wait lucid atload"zicompinit; zicdreplay" blockf for \
      zsh-users/zsh-completions

# commom completion config
zstyle ':completion:*' use-cache yes
zstyle ':completion:*:descriptions' format '[%d]'
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:::::' completer _complete _approximate
zstyle ':completion:*:approximate:*' max-errors 2

#zstyle ':autocomplete:*' min-input 3
#zstyle ':autocomplete:recent-dirs' backend zsh-z
#zstyle ':autocomplete:*' insert-unambiguous yes # default: no
## no:  Tab inserts the top completion.
## yes: Tab first inserts a substring common to all listed completions, if any.
#zstyle ':autocomplete:*' widget-style menu-select # default: complete-word
## complete-word: (Shift-)Tab inserts the top (bottom) completion.
## menu-complete: Press again to cycle to next (previous) completion.
## menu-select:   Same as `menu-complete`, but updates selection in menu.
#zstyle ':autocomplete:history-search:*' list-lines 8  # int
## Show this many history lines when pressing ↑.
#zstyle ':autocomplete:history-incremental-search-*:*' list-lines 16  # int
## Show this many history lines when pressing ⌃R or ⌃S.
#zstyle ':autocomplete:*' fzf-completion yes
#zi wait lucid for marlonrichert/zsh-autocomplete

# fzf-tab must be after comp-init but before fast-syntax-highlighting...
# TODO: Checkout https://github.com/ohmyzsh/ohmyzsh/blob/master/lib/completion.zsh
zstyle ":fzf-tab:*" fzf-flags --color=bg+:23 --border
zstyle ':fzf-tab:*' fzf-min-height 15
# preview config
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'exa -1 --color=always $realpath'
zstyle ':fzf-tab:complete:(-command-|-parameter-|-brace-parameter-|export|unset|expand):*' \
	fzf-preview 'echo ${(P)word}' # preview env vars
# space accetps the current suggestion
zstyle ':fzf-tab:*' fzf-bindings 'space:accept'
# enter accepts and executes
#zstyle ':fzf-tab:*' accept-line enter
# tmux popup - seems slow
#zstyle ':fzf-tab:*' fzf-command ftb-tmux-popup
#zstyle ':fzf-tab:complete:cd:*' popup-pad 30 0
#zstyle ':fzf-tab:*' popup-min-size 50 8
zi light Aloxaf/fzf-tab

zi wait lucid for \
    atclone'source ./fast-syntax-highlighting.plugin.zsh; fast-theme base16' \
    atpull'%atclone' \
  zdharma-continuum/fast-syntax-highlighting

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
(( ! ${+functions[p10k]} )) || p10k finalize
